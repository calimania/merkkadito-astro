---
import type { CollectionEntry } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Main from "@layouts/Main.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Pagination from "@components/Pagination.astro";
import Card from "@components/Card";
import { SITE } from "@config";
import HeroImage from "@components/HeroImage.astro";
import Hr from "@components/Hr.astro";

export interface Props {
  currentPage: number;
  totalPages: number;
  stores: CollectionEntry<"stores">[];
}

import { getCollection } from "astro:content";
import type Store from "../interfaces/Store";
import { slugifyStr } from "@utils/slugify";
import { markketplace } from "@config";

const stores = await getCollection("stores");
const store = stores.find(
  (store: Store) => store.data.slug === markketplace.STORE_SLUG
);

const { currentPage, totalPages } = Astro.props;
---

<Layout
  title={`Posts | ${SITE.title}`}
  meta={{
    title: "Stores",
    description: "Meet other stores in our markketplace",
  }}
>
  <Header activeNav="pages" store={store} />
  <main id="main-content">
    <section id="about" class="mb-10 max-w-3xl mt-4 prose-img:border-0">
      {
        store?.data?.SEO?.socialImage && (
          <HeroImage
            image={store?.data?.SEO?.socialImage}
            title={store?.data?.title}
          />
        )
      }
      <h1 class="text-2xl tracking-wider sm:text-3xl">
        {store?.data?.title}
      </h1>
      <p>{store?.data.Description}</p>
    </section>
    <Hr />
  </main>
  <Main pageTitle="Stores" pageDesc="Friendly stores in this markkÃ«t instance">
    <ul class="-mx-4 flex flex-wrap">
      {
        stores.map(({ data }) => (
          <Card
            href={`/stores/${data.slug || slugifyStr(data.title)}`}
            tags={[]}
            image={data.Logo || data.SEO?.socialImage}
            frontmatter={{
              author: "x",
              title: data.title || "---",
              pubDatetime: new Date(data.createdAt),
              modDatetime: new Date(data.updatedAt),
              description: data.SEO?.metaDescription || data.Description || "",
              SEO: {
                ...data.SEO,
                metaTitle: data.SEO?.metaTitle || data.title || "Store",
                socialImage: {
                  url: data.SEO?.socialImage?.url || data.Logo?.url,
                },
              },
            }}
          />
        ))
      }
    </ul>
  </Main>

  <Pagination
    {currentPage}
    {totalPages}
    prevUrl={`/blog${currentPage - 1 !== 1 ? "/" + (currentPage - 1) : ""}/`}
    nextUrl={`/blog/${currentPage + 1}/`}
  />

  <Footer noMarginTop={totalPages > 1} activeNav="stores" />
</Layout>
